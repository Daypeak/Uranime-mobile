package com.banan.anime;

import java.util.ArrayList;
import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.Window;
import com.banan.entities.Anime;
import com.banan.providers.AnimeProvider;
import com.banan.providers.DBHelper;
import com.banan.providers.RestService;
import com.banan.anime.R;
import com.nostra13.universalimageloader.core.DecodingType;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.view.ViewPager.LayoutParams;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.CursorAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.Toast;

public class AnimeListActivity extends SherlockActivity implements ActionBar.OnNavigationListener
{
	//Global variables
	 private static final int ACTION_BAR_SEARCH=0;
	 private static final int ACTION_BAR_REFRESH=1;
	private Cursor backupC;
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		
		requestWindowFeature(Window.FEATURE_PROGRESS);
		
		setContentView(R.layout.gridview);
		
		
		// Set the actionbar
		ActionBar actionBar = getSupportActionBar();
		actionBar.setTitle("Animelist");
		actionBar.setHomeButtonEnabled(true);
		
		//Actionbar End
		
		String animeIDSQL = DBHelper.ANIME_ID +" IN ("
	    + "SELECT "+DBHelper.EPISODE_ANIME_ID_COL 
	    + " FROM " + DBHelper.EPISODE_TABLE
	    + " WHERE " + DBHelper.EPISODE_SEEN_COL + " IS NOT NULL "
	    + " GROUP BY " + DBHelper.EPISODE_ANIME_ID_COL
	    + ")";
		
		final Cursor shows = managedQuery(
		AnimeProvider.CONTENT_URI, Anime.projection, animeIDSQL, null, DBHelper.ANIME_TITLE_COL + " ASC");
		backupC = shows;
		Log.e("SHOW COUNT",""+shows.getCount());
		
		GridView gview = (GridView) findViewById(R.id.gridview);
		ImageAdapter imgAdapter = new ImageAdapter(this,shows);
		gview.setAdapter(imgAdapter);
		
		gview.setOnItemClickListener(new OnItemClickListener() {

			public void onItemClick(AdapterView<?> parent, View view, int pos,
					long id) {
				shows.moveToPosition(pos);
				String anime_id = "" + shows.getInt(shows.getColumnIndexOrThrow(DBHelper.EPISODE_ANIME_ID_COL));
				
				Intent i = new Intent(getApplicationContext(),AnimeActivity.class);
				i.putExtra("anime_id", anime_id);
				startActivity(i);
			}
		
		});
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {
		case R.id.menu_preferences:
			startActivity(new Intent(this, TvdbPreferenceActivity.class));
			break;
		case R.id.menu_search:
			startActivity(new Intent(this, SearchActivity.class));
			break;
		case R.id.menu_full_update:
			Intent i = new Intent(this, RestService.class);
			i.putExtra(RestService.ACTION, RestService.GET);
			i.putExtra(RestService.OBJECT_TYPE,
					RestService.OBJECT_TYPE_ANIMELIST);
			i.putExtra(RestService.PARAMS, new ArrayList<String>());
			// i.putExtra(RestService.ACTIVITY, );
			startService(i);

			Toast.makeText(this, R.string.animelist_refresh, Toast.LENGTH_SHORT)
					.show();
			break;
		case R.id.menu_calendar:
			startActivity(new Intent(this, CalendarActivity.class));
			break;
		case R.id.menu_update:
			if(backupC.moveToFirst())
			{
				ArrayList<String> param = new ArrayList<String>();
				do{
					param.add(""+backupC.getInt(backupC.getColumnIndexOrThrow(DBHelper.ANIME_ID)));
				}while(backupC.moveToNext());
				
				Intent k = new Intent(this, RestService.class);
				k.putExtra(RestService.ACTION, RestService.GET);
				k.putExtra(RestService.OBJECT_TYPE, RestService.OBJECT_TYPE_ANIME);
				k.putExtra(RestService.PARAMS, param);
				startService(k);

				Toast.makeText(this, R.string.animelist_refresh, Toast.LENGTH_SHORT)
						.show();
			} else {
				Toast.makeText(this, "Nothing to refresh. Try a full-refresh or add an anime", Toast.LENGTH_LONG).show();
			}
			break;
		case R.id.abs__home:
			final Intent intent = new Intent(this, AnimeListActivity.class);
			intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(intent);
			return true;
		default:
			// return super.onHandleActionBarItemClick(item, position);
		}
		return true;
	}


	public class ImageAdapter extends CursorAdapter
	{
		 
		ImageLoader imageLoader;
		ImageLoaderConfiguration config;  
		DisplayImageOptions options;
		
		int height;
		
		private Cursor c;

		public ImageAdapter(Context context, Cursor c)
		{
			super(context,c);
			this.c = c;
			
			final ProgressBar spinner = new ProgressBar(getApplicationContext());
			
			imageLoader = ImageLoader.getInstance();
			
			options = new DisplayImageOptions.Builder()
            /*.showStubImage(R.drawable.stub_image)*/
            .cacheOnDisc()
            .decodingType(DecodingType.MEMORY_SAVING)
            .build();
		}

		@Override
		public void bindView(View view, Context context, Cursor c) {
			
			Resources r = getResources();
			float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 100, r.getDisplayMetrics());
			float pxHeight = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 150, r.getDisplayMetrics());
			
			RelativeLayout rl = (RelativeLayout) view.findViewById(R.id.relativeLayoutPoster);
			
			GridView.LayoutParams paramsRl = new GridView.LayoutParams((int)px, LayoutParams.FILL_PARENT);
			rl.setLayoutParams(paramsRl);
			
			final ImageView image = (ImageView)view.findViewById(R.id.showImg);
			//TextView showName = (TextView)view.findViewById(R.id.showName);
			
			image.setScaleType(ScaleType.CENTER_CROP);
			
			String animePoster = c.getString(c.getColumnIndexOrThrow(DBHelper.ANIME_IMAGE_COL));
			String imagestring = "";
			if(animePoster != null)
				imagestring = Anime.resizeImage((int)px,(int)pxHeight,animePoster);
			else
				imagestring = "http://placehold.it/" + (int)px + "x" + (int)(pxHeight);
			imageLoader.displayImage(imagestring, image, options);
			
			//String animeTitle = c.getString(c.getColumnIndexOrThrow(DBHelper.ANIME_TITLE_COL));
			
			//showName.setText(animeTitle);
			
			return;
		}

		@Override
		public View newView(Context context, Cursor c, ViewGroup viewGroup) {
			 final View view = LayoutInflater.from(context).inflate(R.layout.gridview_single, viewGroup, false);
			 return view;
		}

	}
	
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getSupportMenuInflater().inflate(R.menu.animelist_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }
	
	public static String truncate(String input, int length)
	{
		if(input == null)
			return "";
		if(input.length() <= length-1)
			return input;
		return input.substring(0,length) + "..";
	}

	public boolean onNavigationItemSelected(int itemPosition, long itemId) {
		
		return false;
	}
}